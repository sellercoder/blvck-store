import time
from data.config import ADMIN_ID
from utils.tools.tables import payments_report
from utils.misc.logging import *
from money import Money
from aiogram.dispatcher import FSMContext
from states.admin import ActivateCoupon
from aiogram.dispatcher.filters import Command, Text
from aiogram import types
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from keyboards.inline.wallet_menu import wallet_keyboard, check_qiwi_pay_keyboard
from utils.db_api.models import User
from utils.db_api.db_commands import find_user, add_money, check_success_payment, add_payment, activate_coupon
from utils.payments.qiwi import phone, create_bill, check_bill, get_payments

from loader import dp, bot

line = "‚ûñ"*11
info = "üí¨"
wallet_page_text = f"<b>üí≥ –ö–æ—à–µ–ª–µ–∫</b>\n\n"
wallet_page_info_text = f"<code>üí¨ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±: </code>"

def wallet_bill_text(comment):
	return f"{line}\n<b>‚óªÔ∏è C–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> ü•ù Qiwi\n<b>‚óªÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}\n<b>‚óªÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n{line}\n<code>üí¨ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—É–º–º—É. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É.</code>"

def succes_payment_message(amount):
	m = Money(amount, 'RUB')
	frmt = m.format('ru_RU',currency_digits=False)	
	return f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {frmt} –æ–±–Ω–∞—Ä—É–∂–µ–Ω. {frmt} –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫"


#` –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è üí≥ –ö–æ—à–µ–ª–µ–∫                                                             
@dp.message_handler(Text(equals=["üí≥ –ö–æ—à–µ–ª–µ–∫"]))
async def menu(message: Message):
	user_uid = message.chat.id
	user = find_user(user_uid)
	user_page = user.wallet_info()
	text = f"{wallet_page_text + user_page}\n\n{wallet_page_info_text}"
	markup = wallet_keyboard()

	await message.answer(text, reply_markup=markup)

@dp.callback_query_handler(text_contains="qiwi")
async def bill(call: CallbackQuery):
	user_uid = call.message.chat.id
	user = find_user(user_uid)
	comment = create_bill(1,"tg")
	text = wallet_bill_text(comment)
	markup = check_qiwi_pay_keyboard(comment)
	await call.answer(cache_time=1)
	await call.message.answer(text, reply_markup=markup)

@dp.callback_query_handler(text_contains="check")
async def check(call: CallbackQuery):
	comment = call.data.split(':')[1]
	logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {comment}")
	if check_bill(comment):
		logger.info(f"–ü–ª–∞—Ç–µ–∂ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
		if check_success_payment(comment) == True:
			text = "–¢–∞–∫–æ–π –ø–ª–∞—Ç–µ–∂ —É–∂–µ –µ—Å—Ç—å, –¥–µ–Ω—å–≥–∏ –ø–æ –Ω–µ–º—É —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã"
			logger.info(f"{text}")
			await call.answer(cache_time=1,text=text,show_alert=True)
		else:
			user_uid = call.message.chat.id
			user = find_user(user_uid)
			user_id = user.id
			amount = check_bill(comment)
			add_payment(user_id,comment,amount)
			add_money(user_id,amount)
			text = succes_payment_message(amount)
			await call.answer(cache_time=1, text=text)
			await call.message.edit_text(text)
			# await bot.send_message()
			# await call.message.answer(text)
			for admin in ADMIN_ID:
				await bot.send_message(chat_id=admin,text=f"{user.name} –æ–ø–ª–∞—Ç–∏–ª {amount} –Ω–∞ –∫–∏–≤–∏!")
	else:
		text="–ü–ª–∞—Ç–µ–∂ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!"
		logger.info(f"{text}")
		await call.answer(cache_time=1, text=text, show_alert=True)


@dp.callback_query_handler(text_contains="coupon")
async def input_coupon_uid(call: CallbackQuery):
	title = f"{info}\n"
	info_text = f"<code>–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—É–ø–æ–Ω–∞</code>"
	await call.answer(cache_time=1)
	await call.message.edit_text(text=title)
	await call.message.answer(text=info_text, reply_markup=ReplyKeyboardRemove())
	await ActivateCoupon.Uid.set()


@dp.message_handler(state=ActivateCoupon.Uid)
async def input_coupon_uid_handler(message: types.Message, state: FSMContext):
	logger.info(f"–í–≤–µ–¥–µ–Ω –∫—É–ø–æ–Ω - {message.text} - {message.chat.id}")
	user = find_user(message.chat.id)
	coupon_uid = message.text
	text = activate_coupon(coupon_uid, user.id)
	await message.answer(text=f"{info}<code>{text} –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ</code> <b>/start</b>")
	await state.reset_state()

@dp.callback_query_handler(text_contains="history")
async def payment_history(call: CallbackQuery):
	user = find_user(call.message.chat.id)
	info_text = f"<code>{info} –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç... </code>"
	success_text = f"<code>{info} –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤... –û—Ç–ø—Ä–∞–≤–ª—è—é...</code>"
	file = payments_report(user.id)
	await call.answer(cache_time=1)
	await call.message.edit_text(text=info_text)
	time.sleep(1)
	await bot.send_chat_action(chat_id=call.message.chat.id, action="upload_document")
	await call.message.edit_text(text=success_text)
	time.sleep(1)
	await call.message.answer_document(document=file, disable_content_type_detection=True)


















