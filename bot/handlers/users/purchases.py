from utils.misc.logging import *
from typing import Union
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, CallbackQuery, Document
from keyboards.inline.purchases_menu import pr_menu_cd, purchases_keyboard
from utils.db_api.models import User, Purchase 
from loader import dp

purchases_page_text = f"<b>üõí –ü–æ–∫—É–ø–∫–∏</b>\n\n<code>üí¨ –ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</code>"

#` –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è üìï –û –º–∞–≥–∞–∑–∏–Ω–µ                                                             
@dp.message_handler(Text(equals=["üìÇ –ü–æ–∫—É–ø–∫–∏"]))
async def show_menu(message: Message):
	await list_purchases(message)

async def list_purchases(message: Union[CallbackQuery, Message], **kwargs):
	user = message.chat.id
	markup = purchases_keyboard(user)
	if isinstance(message, Message):
		await message.answer(purchases_page_text, reply_markup=markup)
	elif isinstance(message, CallbackQuery):
		call = message
		await message.message.edit_text(purchases_page_text, reply_markup=markup)

async def show_purchase(callback: CallbackQuery, user, purchase, **kwargs):
    purchase = Purchase.find(purchase)
    text = f"{purchase.page()}" 
    # html_file = open('test.txt', 'rb')
    if purchase.is_file == True:
        html_file = purchase.item['body']
        await callback.answer(cache_time=1)
        await callback.message.answer_document(document=html_file,caption=text, disable_content_type_detection=True)
    else:
        await callback.message.answer(text)

@dp.callback_query_handler(pr_menu_cd.filter())
async def navigate(call: CallbackQuery, callback_data: dict):
    """
    :param call: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ CallbackQuery, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    :param callback_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """

    #` –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å              
    current_level = callback_data.get("level")

    purchase = callback_data.get("purchase")

    #` –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞        
    user = call.message.chat.id

    #` –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º "—É—Ä–æ–≤–Ω–∏" –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    levels = {
        "0": list_purchases,  
        "1": show_purchase
    }

    #` –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è      
    current_level_function = levels[current_level]

    #` –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ª–æ–≥–µ callback_data                   
    logging.info(f"callback_data='{callback_data}'")

    #` –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    await current_level_function(
        call,
        user = user,
        purchase = purchase
    )

