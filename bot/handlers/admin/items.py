from utils.misc.logging import *
from data.config import *
from aiogram import types
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from states.admin import NewItem, DeleteItem, ManyItems
from keyboards.admin.items_menu import items_menu, file_ore_text_keyboard,confirm_keyboard,reusable_keyboard,change_item_menu
from keyboards.admin.admin_menu import admin_menu
from utils.db_api.models import Position, Category, Item
from utils.db_api.admin_db_commands import get_positions_help,summary,admin_text, get_items_page

from loader import dp, bot

line = "‚ûñ"*11
info = "üí¨"
items_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"

@dp.message_handler(user_id=ADMIN_ID, text="‚ñ´Ô∏è–¢–æ–≤–∞—Ä—ã", state="*")
async def admin_positions_page(message: types.Message, state: FSMContext):
	logger.info(f"{message.chat.first_name}-{message.text}")
	text = f"{items_text}\n{get_items_page()}"
	await message.answer(text=text, reply_markup=items_menu)

@dp.callback_query_handler(user_id=ADMIN_ID, text_contains="multi", state="*")
async def admin_itempage(call: CallbackQuery,state: FSMContext):
	logger.info(f"{call.data}")
	help_position_text = get_positions_help()
	title = f"{info}\n"
	info_text = f"<code>–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ ID –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.</code>\n\n{help_position_text}"
	await call.message.edit_text(text=title)
	await call.message.answer(text=info_text, reply_markup=ReplyKeyboardRemove())
	await ManyItems.PositionID.set()

@dp.message_handler(user_id=ADMIN_ID, regexp=r"^(\d+)$", state=ManyItems.PositionID)
async def enter_id(message: types.Message, state: FSMContext):
	position_id = message.text
	info_text = f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ—á–∫–∞ - —Ç–æ–≤–∞—Ä"
	await ManyItems.SetLines.set()
	await state.update_data(position_id=position_id)
	await message.answer(text=info_text)

@dp.message_handler(user_id=ADMIN_ID, state=ManyItems.SetLines)
async def update_all(message: types.Message, state: FSMContext):
	data = await state.get_data()
	position_id = data.get("position_id")
	f = message.text.split("\n")
	for line in f:
		print(line)
		Item.create(position_id=position_id, body=f"{line}")
	await state.reset_state()
	await message.answer(text="–¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã - –∂–º–∏ /admin")

@dp.callback_query_handler(user_id=ADMIN_ID, text_contains="add_item", state="*")
async def admin_add_item_page(call: CallbackQuery,state: FSMContext):
	logger.info(f"{call.data}")
	help_position_text = get_positions_help()
	title = f"{info}\n"
	info_text = f"<code>–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ ID –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.</code>\n\n{help_position_text}"
	await call.message.edit_text(text=title)
	await call.message.answer(text=info_text, reply_markup=ReplyKeyboardRemove())
	await NewItem.PositionID.set()

@dp.message_handler(user_id=ADMIN_ID, regexp=r"^(\d+)$", state=NewItem.PositionID)
async def enter_id(message: types.Message, state: FSMContext):
	position_id = message.text
	if Position.find(position_id) == None:
		logger.info(f"–¢–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
		await message.answer(text=f"<code>{info} –¢–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</code>\n\n{get_positions_help()}")
	else:
		logger.info(f"–ï—Å—Ç—å —Ç–∞–∫–∞—è")
		position = Position.find(position_id)
		if position.reusable == True:
			if position.items.count() == 0:
				logger.info(f"–ü–æ–∑–∏—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
				item = Item()
				item.reusable = True
				item.position_id = position_id
				await message.answer(f"<code>{info}–ß–µ–º —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–≤–∞—Ä? –§–∞–π–ª–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º</code>", reply_markup=file_ore_text_keyboard)
				await NewItem.IsText.set()
				await state.update_data(item=item)
			else:
				logger.info(f"–¢—É—Ç –µ—Å—Ç—å —Ç–æ–≤–∞—Ä")
				await message.answer(f"<code>{info} –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –≤ –Ω–µ–π —É–∂–µ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä. –£–¥–∞–ª–∏—Ç–µ –µ–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é, –≤—ã–±—Ä–∞–≤ —Ç–∏–ø '–º–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤'. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é </code> /admin")
		else:
			logger.info(f"–ü–æ–∑–∏—Ü–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
			item = Item()
			item.reusable = False
			item.position_id = position_id
			await message.answer(f"<code>{info}–ß–µ–º —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–≤–∞—Ä? –§–∞–π–ª–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º?</code>", reply_markup=file_ore_text_keyboard)
			await NewItem.IsText.set()
			await state.update_data(item=item)

@dp.message_handler(user_id=ADMIN_ID, state=NewItem.PositionID)
async def not_id(message: types.Message, state: FSMContext):
    await message.answer(f"<code>{info} –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ ID –ø–æ–∑–∏—Ü–∏–∏</code>\n\n{get_positions_help()}")

@dp.message_handler(user_id=ADMIN_ID, state=NewItem.IsText)
async def not_id(message: types.Message, state: FSMContext):
    await message.answer(f"<code>{info} –ß–µ–º —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–≤–∞—Ä? –§–∞–π–ª–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º?</code>\n\n", reply_markup=file_ore_text_keyboard)

@dp.callback_query_handler(user_id=ADMIN_ID, text_contains="file", state=NewItem.IsText)
async def upload_file(call: types.CallbackQuery, state: FSMContext):
	data = await state.get_data()
	item: Item = data.get("item")
	item.is_file = True
	await state.update_data(item=item)
	await NewItem.UploadFile.set()
	await call.message.edit_text(f"<code>{info} –•–æ—Ä–æ—à–æ, —Ñ–∞–π–ª. –ü—Ä–æ—à–ª–∏ –º–Ω–µ —Ñ–∞–π–ª.</code>\n\n")

@dp.callback_query_handler(user_id=ADMIN_ID, text_contains="text", state=NewItem.IsText)
async def set_text(call: types.CallbackQuery, state: FSMContext):
	data = await state.get_data()
	item: Item = data.get("item")
	item.is_file = False
	await state.update_data(item=item)
	await NewItem.SendText.set()
	await call.message.edit_text(f"<code>{info} –•–æ—Ä–æ—à–æ, —Ç–µ–∫—Å—Ç. –ø—Ä–∏—à–ª–∏ –º–Ω–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç.</code>\n\n")

@dp.message_handler(user_id=ADMIN_ID, content_types=types.ContentTypes.DOCUMENT, state=NewItem.UploadFile)
async def sned_text(message: Message, state: FSMContext):
	data = await state.get_data()
	item: Item = data.get("item")
	item.body = message['document']['file_id']
	await state.update_data(item=item)
	await NewItem.Confirm.set()
	await message.answer(f"–¢–æ–≤–∞—Ä –≤ –ø–æ–∑–∏—Ü–∏–∏ {item.position.name}<code>{info} –î–æ–±–∞–≤–∏—Ç—å?</code>\n\n", reply_markup=confirm_keyboard)

@dp.message_handler(user_id=ADMIN_ID, state=NewItem.UploadFile)
async def not_file(message: types.Message, state: FSMContext):
    await message.answer(f"<code>{info} –ú–Ω–µ –Ω—É–∂–µ–Ω —Ñ–∞–π–ª...</code>\n\n")

@dp.message_handler(user_id=ADMIN_ID, state=NewItem.SendText)
async def sned_text(message: types.Message, state: FSMContext):
	data = await state.get_data()
	item: Item = data.get("item")
	item.body = message.text
	await state.update_data(item=item)
	await NewItem.Confirm.set()
	await message.answer(item.page(), reply_markup=confirm_keyboard)
	# await message.answer(f"{item.position.name} - {item.is_file} - {item.body}<code>{info} –í—Å–µ –≤–µ—Ä–Ω–æ?</code>\n\n", reply_markup=confirm_keyboard)

@dp.callback_query_handler(user_id=ADMIN_ID, state=NewItem.Confirm)
async def confirm(call: types.CallbackQuery, state: FSMContext):
	if call.data == "confirm":
		data = await state.get_data()
		item: Item = data.get("item")
		item.save()
		success_text = f"<code>{info} –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</code>"
		await call.message.edit_text(success_text)
		await call.answer(cache_time=1)
	else:
		cancel_text = f"<code>{info} –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!</code>"
		await call.message.edit_text(cancel_text)
		await call.answer(cache_time=1)

	summary_text = summary()
	text = admin_text(summary_text)
	await call.message.answer(text=text, reply_markup=admin_menu)
	await state.reset_state()

@dp.callback_query_handler(user_id=ADMIN_ID, text_contains="delete_item", state="*")
async def admin_delete_item_page(call: CallbackQuery,state: FSMContext):
	title = f"{info}\n"
	info_text = f"{get_items_page()}\n<code>{info} –ü—Ä–∏—à–ª–∏ ID —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ id - —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å—Ä–∞–∑—É —É–¥–∞–ª–µ–Ω!</code>"
	await call.message.edit_text(text=title)
	await call.message.answer(text=info_text, reply_markup=ReplyKeyboardRemove())
	await DeleteItem.Id.set()

@dp.message_handler(user_id=ADMIN_ID, state=DeleteItem.Id)
async def enter_id(message: types.Message, state: FSMContext):
	item_id = message.text
	item = Item.find(item_id)
	item.delete()
	await message.answer(f"<code>–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!</code>")
	summary_text = summary()
	text = admin_text(summary_text)
	await message.answer(text=text, reply_markup=admin_menu)
	await state.reset_state()









































